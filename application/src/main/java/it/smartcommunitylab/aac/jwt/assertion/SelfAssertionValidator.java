/*******************************************************************************
 * Copyright 2015 Fondazione Bruno Kessler
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 ******************************************************************************/

package it.smartcommunitylab.aac.jwt.assertion;

import com.nimbusds.jwt.JWT;
import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.SignedJWT;
import it.smartcommunitylab.aac.jwt.JWTSigningAndValidationService;
/**
 * @author raman
 *
 */
import java.text.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

/**
 * Validates all assertions generated by this server
 *
 * @author jricher
 *
 */
@Component("selfAssertionValidator")
public class SelfAssertionValidator {

    private final Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    private JWTSigningAndValidationService jwtService;

    @Value("${jwt.issuer}")
    private String issuer;

    public boolean isValid(JWT assertion) {
        if (!(assertion instanceof SignedJWT)) {
            // unsigned assertion
            return false;
        }

        JWTClaimsSet claims;
        try {
            claims = assertion.getJWTClaimsSet();
        } catch (ParseException e) {
            logger.debug("Invalid assertion claims");
            return false;
        }

        // make sure the issuer exists
        if (!StringUtils.hasText(claims.getIssuer())) {
            logger.debug("No issuer for assertion, rejecting");
            return false;
        }

        // make sure the issuer is us
        if (!claims.getIssuer().equals(issuer)) {
            logger.debug("Issuer is not the same as this server, rejecting");
            return false;
        }

        // validate the signature based on our public key
        if (jwtService.validateSignature((SignedJWT) assertion)) {
            return true;
        } else {
            return false;
        }
    }
}

{
    "id": {
        "name": "Id",
        "helperText": "Unique identifier"
    },
    "name": {
        "name": "Name",
        "helperText": "Human readable name"
    },
    "description": {
        "name": "Description",
        "helperText": "Text describing the element, used for views"
    },
    "type": {
        "name": "Type",
        "helperText": "Type field"
    },
    "clientId": {
        "name": "ClientId",
        "helperText": "Client (unique) identifier"
    },
    "slug": {
        "name": "Slug",
        "helperText": "Path-style (unique) identifier"
    },
    "public": {
        "name": "Public",
        "helperText": "Toggle for public/private visibility"
    },
    "languages": {
        "name": "Languages",
        "helperText": "List of languages (codes) enabled"
    },
    "applicationType": {
        "name": "Application type",
        "helperText": "Type of (OAuth2) application"
    },
    "title": {
        "name": "Title",
        "helperText": "Title used for views"
    },
    "customStyle": {
        "name": "Custom style",
        "helperText": "Define a custom style sheet (CSS) to be injected in pages"
    },
    "namespace": {
        "name": "Namespace",
        "helperText": "Service Namespace"
    },
    "scope": {
        "name": "scope.name",
        "helperText": "scope.helperText"
    },
    "authority": {
        "name": "Authority",
        "helperText": ""
    },
    "approvalRoles": {
        "name": "approvalRoles.name",
        "helperText": "approvalRoles.helperText"
    },
    "approvalFunction": {
        "name": "Authorization with approval function",
        "helperText": ""
    },
    "approvalAny": {
        "name": "One of",
        "helperText": ""
    },
    "approvalRequired": {
        "name": "Authorization with explicit approval",
        "helperText": ""
    },
    "multiple": {
        "name": "Is Array",
        "helperText": ""
    },
    "claimMapping": {
        "user": {
            "name": "User claim mapping",
            "helperText": "Claim mapping function should return fully-qualified claims of the current service ONLY. Service namespace is enforced when claims are added to tokens"
        },
        "client": {
            "name": "Client claim mapping",
            "helperText": "Claim mapping function should return fully-qualified claims of the current service ONLY. Service namespace is enforced when claims are added to tokens"
        }
    },
    "key": {
        "name": "key.name",
        "helperText": "key.helperText"
    },
    "groups": {
        "name": "Add a group",
        "helperText": ""
    },
    "roles": {
        "name": "Add custom role",
        "helperText": ""
    },
    "clientSecret": {
        "name": "clientSecret.name"
    },
    "jwks": {
        "name": "jwks.name"
    },
    "context": "context",
    "result": "result",
    "providers": {
        "name": "",
        "helperText": ""
    },
    "scopes": {
        "name": "Add a scope",
        "helperText": ""
    },
    "attributeSets": {
        "name": "attributeSets.name",
        "helperText": "attributeSets.helperText"
    },
    "enabled": {
        "name": "enabled.name"
    },
    "registered": {
        "name": "registered.name"
    },
    "username": {
        "name": "Username"
    },
    "subjectId": {
        "name": "SubjectId",
        "helperText": ""
    },
    "identifier": {
        "name": "identifier.name",
        "helperText": "identifier.helperText"
    },
    "accounts": {
        "name": "accounts.name"
    },
    "status": {
        "name": "status.name"
    },
    "role": {
        "name": "Role",
        "helperText": ""
    },
    "subjects": {
        "name": "Subjects",
        "helperText": "Numer of associated subjects"
    },
    "permissions": {
        "name": "Permission",
        "helperText": ""
    },
    "group": {
        "name": "group.name",
        "helperText": "group.helperText"
    },
    "members": {
        "name": "members.name",
        "helperText": "members.helperText"
    },
    "email": {
        "name": "Email Address",
        "helperText": ""
    },
    "keys": {
        "name": "keys.name"
    },
    "": "",
    "events": {
        "helperText": "events.helperText",
        "name": "events.name"
    },
    "linkable": {
        "helperText": "linkable.helperText",
        "name": "linkable.name"
    },
    "notes": {
        "helperText": "notes.helperText",
        "name": "notes.name"
    },
    "oauth2": {
        "accessTokenValidity": {
            "helperText": "oauth2.accessTokenValidity.helperText",
            "name": "oauth2.accessTokenValidity.name"
        },
        "applicationType": {
            "helperText": "oauth2.applicationType.helperText",
            "name": "oauth2.applicationType.name"
        },
        "authenticationMethods": {
            "helperText": "oauth2.authenticationMethods.helperText",
            "name": "oauth2.authenticationMethods.name"
        },
        "authorizedGrantTypes": {
            "helperText": "oauth2.authorizedGrantTypes.helperText",
            "name": "oauth2.authorizedGrantTypes.name"
        },
        "enableClientRegistration": {
            "helperText": "oauth2.enableClientRegistration.helperText",
            "name": "oauth2.enableClientRegistration.name"
        },
        "firstParty": {
            "helperText": "oauth2.firstParty.helperText",
            "name": "oauth2.firstParty.name"
        },
        "idTokenClaims": {
            "helperText": "oauth2.idTokenClaims.helperText",
            "name": "oauth2.idTokenClaims.name"
        },
        "openClientRegistration": {
            "helperText": "oauth2.openClientRegistration.helperText",
            "name": "oauth2.openClientRegistration.name"
        },
        "redirectUris": {
            "helperText": "oauth2.redirectUris.helperText",
            "name": "oauth2.redirectUris.name"
        },
        "refreshTokenRotation": {
            "helperText": "oauth2.refreshTokenRotation.helperText",
            "name": "oauth2.refreshTokenRotation.name"
        },
        "refreshTokenValidity": {
            "helperText": "oauth2.refreshTokenValidity.helperText",
            "name": "oauth2.refreshTokenValidity.name"
        },
        "subjectType": {
            "helperText": "oauth2.subjectType.helperText",
            "name": "oauth2.subjectType.name"
        },
        "tokenType": {
            "helperText": "oauth2.tokenType.helperText",
            "name": "oauth2.tokenType.name"
        }
    },
    "persistence": {
        "helperText": "persistence.helperText",
        "name": "persistence.name"
    },
    "position": {
        "helperText": "position.helperText",
        "name": "position.name"
    },
    "template_override": {
        "helperText": "template_override.helperText",
        "name": "template_override.name"
    },
    "tos": {
        "approveTOS": {
            "helperText": "tos.approveTOS.helperText",
            "name": "tos.approveTOS.name"
        },
        "enableTOS": {
            "helperText": "tos.enableTOS.helperText",
            "name": "tos.enableTOS.name"
        }
    },
    "webhooks": {
        "afterTokenGrant": {
            "helperText": "webhooks.afterTokenGrant.helperText",
            "name": "webhooks.afterTokenGrant.name"
        },
        "afterUserApproval": {
            "helperText": "webhooks.afterUserApproval.helperText",
            "name": "webhooks.afterUserApproval.name"
        },
        "beforeTokenGrant": {
            "helperText": "webhooks.beforeTokenGrant.helperText",
            "name": "webhooks.beforeTokenGrant.name"
        },
        "beforeUserApproval": {
            "helperText": "webhooks.beforeUserApproval.helperText",
            "name": "webhooks.beforeUserApproval.name"
        }
    },
    "time": {
        "name": "Time"
    },
    "principal": {
        "name": "Principal"
    },
    "issuer": "Issuer",
    "authorization_endpoint": "Authorization Endpoint",
    "token_endpoint": "Token Endpoint",
    "jwks_uri": "JWKS endpoint",
    "userinfo_endpoint": "Userinfo endpoint",
    "introspection_endpoint": "Introspection endpoint",
    "revocation_endpoint": "Revocation endpoint",
    "registration_endpoint": "Registration endpoint",
    "end_session_endpoint": "Endsession endpoint",
    "tosAccepted": {
        "name": "Approved"
    },
    "account": {
        "active": "Active",
        "inactive": "Inactive",
        "verified": "Verified",
        "unverified": "Unverified",
        "unlocked": "Unlocked",
        "confirmed": "Confirmed",
        "unconfirmed": "Unconfirmed"
    },
    "clientJwk": {
        "name": "Client Private Key (JWK)"
    }
}
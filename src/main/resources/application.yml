# SERVER ENDPOINT
server:
   host: ${SERVER_HOST:localhost}
   port: ${SERVER_PORT:8080}
   servlet:
     context-path: ${SERVER_CONTEXT:/}
   tomcat:
     remoteip:
      remote_ip_header: ${SERVER_TOMCAT_REMOTE_IP_HEADER:x-forwarded-for}
      protocol_header: ${SERVER_TOMCAT_PROTOCOL_HEADER:x-forwarded-proto}
   max-http-header-size: 32000     
   error:
      include-stacktrace: ON_PARAM   

# APPLICATION EXTERNAL URL
application:
   url: ${APPLICATION_EXT_URL:http://localhost:8080}
   name: AAC

# DB CONFIGURATION
jdbc:
   dialect: ${JDBC_DIALECT:org.hibernate.dialect.H2Dialect}
   driver: ${JDBC_DRIVER:org.h2.Driver}
   url: ${JDBC_URL:jdbc:h2:file:./data/db}
   user: ${JDBC_USER:ac}
   password: ${JDBC_PASS:ac}
   show-sql: false

# AAC ADMIN USER PASSWORD
admin:
   username: ${ADMIN_USERNAME:admin}
   password: ${ADMIN_PASSWORD:admin}
   email: ${ADMIN_EMAIL:}
   contexts: apimanager, authorization, components, organizations, resources, services
   contextSpaces: components/apimanager/carbon.super
   roles: ${ADMIN_ROLES:}

# BASIC SECURITY PROPERTIES
security:
   keystore: ${JWK_KEYSTORE:classpath:/keystore.jwks} 
   cache:
      jwks: no-cache, no-store, max-age=0, must-revalidate #set cacheable with "public, max-age=3600, must-revalidate, no-transform"

#OAUTH2
oauth2:
   redirects:
      matchports: ${REDIRECT_MATCH_PORTS:true}
      matchsubdomains: ${REDIRECT_MATCH_SUBDOMAINS:true}
   jwt: ${ENABLE_JWT:true}
   introspection:
      permitAll: ${OAUTH2_INTROSPECTION_PERMIT_ALL:false}
   pkce:
      allowRefresh: ${OAUTH2_PKCE_ALLOW_REFRESH:true}
   clientCredentials:
      allowRefresh: ${OAUTH2_CLIENTCREDENTIALS_ALLOW_REFRESH:true}
   resourceOwnerPassword:
      allowRefresh: ${OAUTH2_RESOURCEOWNERPASSWORD_ALLOW_REFRESH:true}
   accesstoken:
      validity: ${ACCESS_TOKEN_VALIDITY:43200}
   refreshtoken:
      validity: ${REFRESH_TOKEN_VALIDITY:2592000}
   authcode:
      validity: ${AUTH_CODE_VALIDITY:600}          
            
#JWT
jwt:
   issuer: ${JWT_ISSUER:${application.url}}
   kid:
      sig: ${JWT_KID_SIG:}
      enc: ${JWT_KID_ENC:}
   claims:
      includeInternalRoles: false
      includeResourceRoles: false

#EXTERNAL PROVIDERS
authorities:
   internal:
      passwordResetValidity: 86400
      confirmationValidity: 86400
      enablePasswordReset: true
      passwordSupportWhitespace: false
      passwordRequireNumber: true
      enablePasswordSet: false
      passwordMaxLength: 15
      passwordMinLength: 6
      enableDelete: true
      maxSessionDuration: 86400
      enableUpdate: true
      passwordRequireAlpha: true
      enableRegistration: true
      confirmationRequired: true
      passwordRequireSpecial: false   
#      confirmation:
#        required: true
#        validity: 86400
#      password:
#        minLength: 8
#        maxLength: 20
#        requireAlpha: true
#        requireNumber: false
#        requireSpecial: false
#        supportWhitespace: false
#        reset:
#          enabled: true
#          validity: 86400
   webauthn:
      rpid: ${WEBAUTHN_RP_ID:localhost:8080}
      rpName: ${WEBAUTHN_RP_NAME:AAC}
      enableRegistration: ${WEBAUTHN_ENABLE_REGISTRATION:true}
      trustUnverifiedAuthenticatorResponses: ${WEBAUTHN_TRUST_UNVERIFIED_AUTH_RESPONSES:false}
      enableUpdate: false
      maxSessionDuration: 86400

providers:
  identity:
    - provider: google
      authority: oidc
      type: identity
      name: Google
      configuration:
          enable: ${IDP_GOOGLE_ENABLE:false}
          clientName: Google
          clientId: ${IDP_GOOGLE_CLIENT_ID}
          clientSecret: ${IDP_GOOGLE_CLIENT_SECRET}
          clientAuthenticationMethod: client_secret_basic
          scope: openid,profile,email
          authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
          tokenUri: https://www.googleapis.com/oauth2/v4/token
          jwkSetUri: https://www.googleapis.com/oauth2/v3/certs
          issuerUri: https://accounts.google.com
          userInfoUri: https://www.googleapis.com/oauth2/v3/userinfo
          userNameAttributeName: email
  attributes:
  templates:
    internal:
    saml:
    oidc:
      - clientName: Google
        clientAuthenticationMethod: client_secret_basic
        scope: openid,profile,email
        authorizationUri: https://accounts.google.com/o/oauth2/v2/auth
        tokenUri: https://www.googleapis.com/oauth2/v4/token
        jwkSetUri: https://www.googleapis.com/oauth2/v3/certs
        issuerUri: https://accounts.google.com
        userInfoUri: https://www.googleapis.com/oauth2/v3/userinfo
        userNameAttributeName: email
      - clientName: Facebook
        clientAuthenticationMethod: client_secret_post      
        scope: public_profile,email
        authorizationUri: https://www.facebook.com/v2.8/dialog/oauth
        tokenUri: https://graph.facebook.com/v2.8/oauth/access_token
        userInfoUri: https://graph.facebook.com/me?fields=id,name,email
        userNameAttributeName: id
      - clientName: GitHub
        clientAuthenticationMethod: client_secret_basic      
        scope: read:user
        authorizationUri: https://github.com/login/oauth/authorize
        tokenUri: https://github.com/login/oauth/access_token
        userInfoUri: https://api.github.com/user
        userNameAttributeName: id        

attributesets:
  sets:
    - identifier: sub
      keys: sub      
    - identifier: profile
      keys: name,family_name,given_name,middle_name,nickname,preferred_username,profile,picture,website,gender,birthdate,zoneinfo,locale,updated_at
    - identifier: email
      keys: email,email_verified     
    - identifier: phone
      keys: phone_number,phone_number_verified 
    - identifier: address
      keys: formatted,street_address,locality,region,postal_code,country
    

spid:
  idps:
    - entityName: Aruba ID
      entityId: https://loginspid.aruba.it    
      entityLabel: arubaid
      metadataUrl: https://loginspid.aruba.it/metadata
    - entityName: Infocert ID
      entityId: https://identity.infocert.it
      entityLabel: infocertid
      metadataUrl: https://identity.infocert.it/metadata/metadata.xml
    - entityName: Intesa ID
      entityId: https://spid.intesa.it
      entityLabel: intesaid
      metadataUrl: https://spid.intesa.it/metadata/metadata.xml
    - entityName: Lepida ID
      entityId: https://id.lepida.it/idp/shibboleth
      entityLabel: lepidaid
      metadataUrl: https://id.lepida.it/idp/shibboleth
    - entityName: Namirial ID
      entityId: https://idp.namirialtsp.com/idp
      entityLabel: namirialid
      metadataUrl: https://idp.namirialtsp.com/idp/metadata
    - entityName: Poste ID
      entityId: https://posteid.poste.it
      entityLabel: posteid
      metadataUrl: https://posteid.poste.it/jod-fs/metadata/metadata.xml    
    - entityName: Sielte ID
      entityId: https://identity.sieltecloud.it
      entityLabel: spiditalia
      metadataUrl: https://identity.sieltecloud.it/simplesaml/metadata.xml
    - entityName: SPIDItalia Register.it
      entityId: https://spid.register.it
      entityLabel: sielteid
      metadataUrl: https://spid.register.it/login/metadata
    - entityName: Tim ID
      entityId: https://login.id.tim.it/affwebservices/public/saml2sso
      entityLabel: timid
      metadataUrl: https://login.id.tim.it/spid-services/MetadataBrowser/idp  
      
                            
# LOGGING CONFIGURATION
logging:
   level:
      ROOT: INFO
      it.smartcommunitylab.aac: ${LOG_LEVEL:INFO}

# SPRING
spring:
   messages:
      basename: resources/internal
      encoding: UTF-8
   web:
      resources:
        cache.period: 3600
   h2.console.enabled: false       
   jpa.hibernate.ddl-auto: validate

# ROLE PREFIX FOR AUTHORIZATION CHECK
authorization:
   contextSpace:

# EMAIL SERVER FOR NOTIFICATIONS
mail:
   username: ${MAIL_USER:EMAIL_SENDER}
   password: ${MAIL_PASS:EMAIL_PASSWORD}
   host: ${MAIL_HOST:localhost}
   port: ${MAIL_PORT:25}
   protocol: ${MAIL_PROTOCOL:smtp}

api:
   clients:
      auto: 
        introspect: true
        machine: false
        web: false
        
bootstrap:
    apply: ${BOOTSTRAP_APPLY:false}
    file: ${BOOTSTRAP:classpath:/bootstrap.yaml} 


#port used to expose actuator
management:
    server:
      port: ${MANAGEMENT_PORT:8081}
    endpoints:
      enabled-by-default: false
      web.base-path: 
    endpoint:
      info:
        enabled: true
      health:
        enabled: true


# Open API
openapi:
   version: 1.0.0
   license: Apache License, Version 2.0
   licenseUrl: http://www.apache.org/licenses/LICENSE-2.0
   contact:
      name: DS Lab
      url: www.smartcommunitylab.it
      email: info@smartcommunitylab.it
                      
springdoc:
  swagger-ui:
    disable-swagger-default-url: true

    